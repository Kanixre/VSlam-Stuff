Links and Commands
-----

roscore
rosrun ORB_SLAM3 Mono Vocabulary/ORBvoc.txt Examples_old/ZED2.yaml
rosbag play --pause kg_lc_march.bag # replace with desired bag name
rosrun image_transport republish compressed in:=/front/zed_node/rgb/image_rect_color raw out:=/camera/image_raw

---------------------------------------------------------------------------------------------------
https://lcas.lincoln.ac.uk/nextcloud/index.php/s/q73JHG6xWwX3Lqf

---------------------------------------------------------------------------------------------------
#!/usr/bin/env python

import rospy
import cv2
from cv_bridge import CvBridge
from sensor_msgs.msg import Image

def publish_images():
    # Initialize the ROS node
    rospy.init_node('image_publisher', anonymous=True)
    
    # Create a ROS publisher
    image_pub = rospy.Publisher('/camera/image_raw', Image, queue_size=10)
    
    # Initialize the CvBridge class
    bridge = CvBridge()
    
    # Option 1: Publish images from a video stream (e.g., webcam)
    # cap = cv2.VideoCapture(0)  # For webcam
    cap = cv2.VideoCapture('/path/to/video.mp4')  # For video file

    # Option 2: Publish images from a directory (e.g., a series of images)
    # import glob
    # image_paths = sorted(glob.glob('/path/to/images/*.jpg'))
    
    rate = rospy.Rate(10)  # Set a publishing rate (e.g., 10 Hz)
    
    while not rospy.is_shutdown():
        # Option 1: Read from video or webcam
        ret, frame = cap.read()
        if not ret:
            rospy.loginfo("No frame captured from video stream.")
            break

        # Option 2: Read from a list of images
        # for img_path in image_paths:
        #     frame = cv2.imread(img_path)
        
        # Convert the OpenCV image to ROS Image message
        ros_image = bridge.cv2_to_imgmsg(frame, encoding="bgr8")
        
        # Publish the image
        image_pub.publish(ros_image)
        
        # Maintain the loop rate
        rate.sleep()
    
    # Release the video capture object
    cap.release()

if __name__ == '__main__':
    try:
        publish_images()
    except rospy.ROSInterruptException:
        pass

---------------------------------------------------------------------------------------------------

header:
frame_id: "front_left_camera_optical_frame"
 
height: 1080
width: 1920
 
distortion_model: "plumb_bob"
 
D: [0.0, 0.0, 0.0, 0.0, 0.0]
 
K: [1057.0008544921875,       0.0,                952.2301635742188,
     0.0,                  1057.0008544921875,      553.5770263671875,     
     0.0,                                      0.0,                                           1.0]
 
R: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]
 
P: [1057.0008544921875,       0.0,                952.2301635742188,
      0.0,                                     0.0,              1057.0008544921875,
      553.5770263671875,         0.0,                                            0.0,
      0.0,                                     1.0,                                           0.0]
 
binning_x: 0
binning_y: 0
roi:
x_offset: 0
y_offset: 0
height: 0
width: 0
do_rectify: False1920


https://arxiv.org/abs/2007.11898

