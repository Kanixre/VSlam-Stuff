Links and Commands
-----

import rosbag
import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from PIL import Image as PILImage
import numpy as np

# Initialize a CvBridge to convert ROS Image messages to OpenCV format
bridge = CvBridge()

# Path to your ROS bag
rosbag_path = 'path_to_your_rosbag.bag'

# Name of the topic where the image is published in the ROS bag
image_topic = '/camera/image_raw'

# Open the ROS bag
with rosbag.Bag(rosbag_path, 'r') as bag:
    # Iterate through the messages in the bag
    for topic, msg, t in bag.read_messages(topics=[image_topic]):
        if topic == image_topic:
            # Convert the ROS Image message to a NumPy array using CvBridge
            cv_image = bridge.imgmsg_to_cv2(msg, desired_encoding='passthrough')
            
            # Convert the NumPy array to a PIL image
            pil_image = PILImage.fromarray(cv_image)

            # Save or display the image using PIL
            pil_image.show()  # Display the image
            # pil_image.save('output_image.png')  # Save the image

            # Break after processing the first image (if you only want to process one)
            break
----------------------------------------------------------------------------------------------------


https://lcas.lincoln.ac.uk/nextcloud/index.php/s/q73JHG6xWwX3Lqf

# Install ROS
# http://wiki.ros.org/noetic/Installation/Ubuntu
sudo apt install ros-noetic-desktop-full

git clone https://github.com/lturing/ORB_SLAM3_ROS.git
cd ORB_SLAM3_ROS
chmod +x ./build.sh 
./build.sh 

# Download datasets
# https://www.cvlibs.net/datasets/kitti/eval_odometry.php
# https://cvg.cit.tum.de/data/datasets/rgbd-dataset/download

# Generate associate.txt (example)
python evaluation/associate.py /home/spurs/dataset/rgbd_dataset_freiburg2_large_with_loop/rgb.txt /home/spurs/dataset/rgbd_dataset_freiburg2_large_with_loop/depth.txt >> associate.txt

# Run monocular
# Modify launch/orb_slam_mono.launch as needed
chmod +x ./run_mono.sh
./run_mono.sh 

# Run stereo
# Modify launch/orb_slam_stereo.launch as needed
chmod +x ./run_stereo.sh 
./run_stereo.sh 

# Run RGB-D dense mapping
# Modify launch/orb_slam_rgbd_mapping.launch as needed
chmod +x ./run_rgbd_mapping.sh 
./run_rgbd_mapping.sh 

header:
frame_id: "front_left_camera_optical_frame"
 
height: 1080
width: 1920
 
distortion_model: "plumb_bob"
 
D: [0.0, 0.0, 0.0, 0.0, 0.0]
 
K: [1057.0008544921875,       0.0,                952.2301635742188,
     0.0,                  1057.0008544921875,      553.5770263671875,     
     0.0,                                      0.0,                                           1.0]
 
R: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]
 
P: [1057.0008544921875,       0.0,                952.2301635742188,
      0.0,                                     0.0,              1057.0008544921875,
      553.5770263671875,         0.0,                                            0.0,
      0.0,                                     1.0,                                           0.0]
 
binning_x: 0
binning_y: 0
roi:
x_offset: 0
y_offset: 0
height: 0
width: 0
do_rectify: False1920


https://arxiv.org/abs/2007.11898

